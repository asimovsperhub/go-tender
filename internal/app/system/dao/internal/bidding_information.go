// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// BiddingInformationDao is the data access object for table bidding_information.
type BiddingInformationDao struct {
	table   string                    // table is the underlying table name of the DAO.
	group   string                    // group is the database configuration group name of current DAO.
	columns BiddingInformationColumns // columns contains all the column names of Table for convenient usage.
}

// BiddingInformationColumns defines and stores column names for table bidding_information.
type BiddingInformationColumns struct {
	Id                     string // UID
	BulletinType           string // 公告类型
	NoticeNature           string // 公告性质
	City                   string // 所属城市
	IndustryClassification string // 行业分类
	ReleaseTime            string // 发布时间
	TenderDeadline         string // 投标截止时间
	BidopeningTime         string // 开标时间
	Title                  string // 标题
	AnnouncementContent    string // 公告内容
	Attachment             string // 招标附件
	Amount                 string // 金额
	ContactPerson          string // 联系人
	ContactInformation     string // 联系方式
	ContactContent         string // 联系方式内容
	Link                   string // 源链接
}

//  biddingInformationColumns holds the columns for table bidding_information.
var biddingInformationColumns = BiddingInformationColumns{
	Id:                     "id",
	BulletinType:           "bulletin_type",
	NoticeNature:           "notice_nature",
	City:                   "city",
	IndustryClassification: "industry_classification",
	ReleaseTime:            "release_time",
	TenderDeadline:         "tender_deadline",
	BidopeningTime:         "bidopening_time",
	Title:                  "title",
	AnnouncementContent:    "announcement_content",
	Attachment:             "attachment",
	Amount:                 "amount",
	ContactPerson:          "contact_person",
	ContactInformation:     "contact_information",
	ContactContent:         "contact_content",
	Link:                   "link",
}

// NewBiddingInformationDao creates and returns a new DAO object for table data access.
func NewBiddingInformationDao() *BiddingInformationDao {
	return &BiddingInformationDao{
		group:   "default",
		table:   "bidding_information",
		columns: biddingInformationColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *BiddingInformationDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *BiddingInformationDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *BiddingInformationDao) Columns() BiddingInformationColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *BiddingInformationDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *BiddingInformationDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *BiddingInformationDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
