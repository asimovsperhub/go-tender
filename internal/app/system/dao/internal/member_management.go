// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// MemberManagementDao is the data access object for table member_management.
type MemberManagementDao struct {
	table   string                  // table is the underlying table name of the DAO.
	group   string                  // group is the database configuration group name of current DAO.
	columns MemberManagementColumns // columns contains all the column names of Table for convenient usage.
}

// MemberManagementColumns defines and stores column names for table member_management.
type MemberManagementColumns struct {
	Id                      string //
	MonthlycardOriginal     string // 月卡原价
	MonthlycardCurrent      string // 月卡现价
	QuartercardOriginal     string // 季卡原价
	QuartercardCurrent      string // 季卡现价
	AnnualcardOriginal      string // 年卡原价
	AnnualcardCurrent       string // 年卡现价
	DownloadKnowledge       string // 下载知识
	DownloadVideo           string // 下载视频
	MonthlycardIntegral     string // 月卡积分
	QuartercardIntegral     string // 季卡积分
	AnnualcardIntegral      string // 年卡积分
	KnowledgeIntegral       string // 发布知识积分
	VideoIntegral           string // 发布视频积分
	IssueIntegral           string // 发行积分
	MonthlycardSubscription string // 月卡可订阅数
	QuartercardSubscription string // 季卡可订阅数
	AnnualcardSubscription  string // 年卡可订阅数
	NewSubscription         string // 新购买可订阅数
}

//  memberManagementColumns holds the columns for table member_management.
var memberManagementColumns = MemberManagementColumns{
	Id:                      "id",
	MonthlycardOriginal:     "monthlycard_original",
	MonthlycardCurrent:      "monthlycard_current",
	QuartercardOriginal:     "quartercard_original",
	QuartercardCurrent:      "quartercard_current",
	AnnualcardOriginal:      "annualcard_original",
	AnnualcardCurrent:       "annualcard_current",
	DownloadKnowledge:       "download_knowledge",
	DownloadVideo:           "download_video",
	MonthlycardIntegral:     "monthlycard_integral",
	QuartercardIntegral:     "quartercard_integral",
	AnnualcardIntegral:      "annualcard_integral",
	KnowledgeIntegral:       "knowledge_integral",
	VideoIntegral:           "video_integral",
	IssueIntegral:           "issue_integral",
	MonthlycardSubscription: "monthlycard_subscription",
	QuartercardSubscription: "quartercard_subscription",
	AnnualcardSubscription:  "annualcard_subscription",
	NewSubscription:         "new_subscription",
}

// NewMemberManagementDao creates and returns a new DAO object for table data access.
func NewMemberManagementDao() *MemberManagementDao {
	return &MemberManagementDao{
		group:   "default",
		table:   "member_management",
		columns: memberManagementColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *MemberManagementDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *MemberManagementDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *MemberManagementDao) Columns() MemberManagementColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *MemberManagementDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *MemberManagementDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *MemberManagementDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
