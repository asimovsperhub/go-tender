// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// SysEnterpriseDao is the data access object for table sys_enterprise.
type SysEnterpriseDao struct {
	table   string               // table is the underlying table name of the DAO.
	group   string               // group is the database configuration group name of current DAO.
	columns SysEnterpriseColumns // columns contains all the column names of Table for convenient usage.
}

// SysEnterpriseColumns defines and stores column names for table sys_enterprise.
type SysEnterpriseColumns struct {
	Id                   string //
	Name                 string // 企业名称
	Location             string // 所在地
	Industry             string // 所属行业
	Contact              string // 联系电话
	Icon                 string // 图标
	Introduction         string // 简介
	Remark               string // 其他
	License              string // 营业执照
	LicenseStatus        string // 审核状态 0待审核 1审核通过 2审核未通过
	Certificate          string // 证明书
	CertificateStatus    string // 审核状态 0待审核 1审核通过 2审核未通过
	OperationId          string // 操作管理员id
	EstablishmentAt      string // 成立时间
	CreatedAt            string // 创建日期
	UpdatedAt            string // 修改日期
	LicenseMessage       string // 营业执照审核留言
	CertificateMessage   string // 证明书审核留言
	UserId               string // 用户id
	Nickname             string // 企业简称
	Content              string // 主页内容
	OplicenseMessage     string // 营业执照管理员留言
	OpcertificateMessage string // 证明书管理员留言
}

//  sysEnterpriseColumns holds the columns for table sys_enterprise.
var sysEnterpriseColumns = SysEnterpriseColumns{
	Id:                   "id",
	Name:                 "name",
	Location:             "location",
	Industry:             "industry",
	Contact:              "contact",
	Icon:                 "icon",
	Introduction:         "introduction",
	Remark:               "remark",
	License:              "license",
	LicenseStatus:        "license_status",
	Certificate:          "certificate",
	CertificateStatus:    "certificate_status",
	OperationId:          "operation_id",
	EstablishmentAt:      "establishment_at",
	CreatedAt:            "created_at",
	UpdatedAt:            "updated_at",
	LicenseMessage:       "license_message",
	CertificateMessage:   "certificate_message",
	UserId:               "user_id",
	Nickname:             "nickname",
	Content:              "content",
	OplicenseMessage:     "oplicense_message",
	OpcertificateMessage: "opcertificate_message",
}

// NewSysEnterpriseDao creates and returns a new DAO object for table data access.
func NewSysEnterpriseDao() *SysEnterpriseDao {
	return &SysEnterpriseDao{
		group:   "default",
		table:   "sys_enterprise",
		columns: sysEnterpriseColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *SysEnterpriseDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *SysEnterpriseDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *SysEnterpriseDao) Columns() SysEnterpriseColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *SysEnterpriseDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *SysEnterpriseDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *SysEnterpriseDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
